// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "../src/zod"
  relationModel = "default"
  modelCase     = "camelCase"
}

model User {
  id                    Int                 @id @default(autoincrement())
  username              String              @unique
  email                 String              @unique
  country               String              @default("India")
  phone                 String              @unique
  uniqueId              String              @unique
  password              String              @default("")
  emailVerified         Boolean             @default(false)
  phoneVerified         Boolean             @default(false)
  twoFactorEnable       Boolean             @default(false)
  about                 String              @default("")
  disable               Boolean             @default(false)
  channel               UsersChannel[] // many Channels does a User have Or Included
  allChannelUserDetails ChannelUserDetail[] // Many User Details in Channels
  senderRequest         Friends[]           @relation(name: "SenderRequest") // Sender Request Friends
  receiverRequest       Friends[]           @relation(name: "ReceiverRequest") // Receiver Request Friends
  senderMessages        Message[]           @relation(name: "SenderMessage")
  receiverMessage       Message[]           @relation(name: "ReceiverMessage")
  notifications         Notifications[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  accounts              Account[]
  sessions              Session[]
}

model Account {
  id                       String  @id @default(cuid())
  user                     User    @relation(fields: [userId], references: [uniqueId], onDelete: Cascade)
  userId                   String  @default("")
  type                     String  @default("")
  provider                 String  @default("")
  providerAccountId        String  @default("")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [uniqueId], onDelete: Cascade)
  userId       String   @default("")
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
}

model ChannelUserDetail {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [uniqueId]) // User Id for User Details in Channel
  userId     String
  accessRole Int
  room       Room[] // Access to Multiple Rooms in a Channel for a User
  join_type  Int
  channel    Channel? @relation(fields: [channelId], references: [uniqueId]) // Single Channel Id for Multiple Room 
  channelId  String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UsersChannel {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [uniqueId]) // User Id for Channels under User
  userId    String    @default("")
  uniqueId  String    @unique
  channels  Channel[] // All Channels created by a User
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Channel {
  id             Int                 @id @default(autoincrement())
  uniqueId       String              @unique
  name           String              @unique
  rooms          Room[] // No of Rooms in Channel
  userDetails    ChannelUserDetail[] // Number Users in a Channel
  inviteCode     String              @unique
  usersChannel   UsersChannel?       @relation(fields: [usersChannelId], references: [uniqueId], onDelete: Cascade) // If a part of User's Channel
  usersChannelId String              @default("")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Room {
  id          Int                 @id @default(autoincrement())
  uniqueId    String              @unique
  name        String
  users       ChannelUserDetail[] // User Details for Room
  channel     Channel             @relation(fields: [channelId], references: [uniqueId], onDelete: Cascade) // Room of Channel Id
  channelId   String              @default("")
  accessRoles Int
  roomChat    Message[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Friends {
  id         Int      @id @default(autoincrement())
  sender     User     @relation(fields: [senderId], references: [uniqueId], name: "SenderRequest") // Friend Request Sender Id
  senderId   String   @default("")
  reciever   User     @relation(fields: [receiverId], references: [uniqueId], name: "ReceiverRequest") // Friend Request Receiver Id
  receiverId String   @default("")
  status     Boolean  @default(false)
  uniqueId   String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id               Int            @id @default(autoincrement())
  uniqueId         String         @unique
  message          String
  file             String
  type             String
  read             Boolean
  reply            Boolean
  replyMessage     String
  sender           User           @relation(fields: [senderId], references: [uniqueId], name: "SenderMessage") // Message Sender Id
  senderId         String         @default("")
  reciever         User           @relation(fields: [receiverId], references: [uniqueId], name: "ReceiverMessage") // Message Receiver Id
  receiverId       String         @default("")
  room             Room           @relation(fields: [roomId], references: [uniqueId])
  roomId           String         @default("")
  individualChat   IndividualChat @relation(fields: [individualChatId], references: [uniqueId])
  individualChatId String         @default("")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Notifications {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  read        Boolean
  user        User     @relation(fields: [userId], references: [uniqueId])
  userId      String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model IndividualChat {
  id        Int       @id @default(autoincrement())
  uniqueId  String    @unique
  Message   Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
