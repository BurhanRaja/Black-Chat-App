// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum SUserRole {
  MEMBER
  ADMIN
  MODERATOR
}

enum RoomType {
  TEXT
  VIDEO
  AUDIO
}

model Profile {
  id                  String  @id @default(uuid())
  userId              String  @unique
  displayname         String  @unique
  username            String
  email               String  @unique
  password            String
  emailVerified       Boolean @default(false)
  imageUrl            String  @default("")
  bio                 String  @default("")
  gender              Int     @default(-1)
  forgetPasswordToken String  @default("")

  serverUsers            SUser[]
  servers                Server[]
  conversationsInitiated Conversation[]  @relation(name: "POneId")
  conversationsReceived  Conversation[]  @relation(name: "PTwoId")
  directMessages         DirectMessage[]
  reactions              Reaction[]
  Account                Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model SUser {
  id      String    @id @default(uuid())
  sUserId String    @unique
  type    SUserRole @default(MEMBER)

  user     Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId   String
  server   Server  @relation(fields: [serverId], references: [serverId])
  serverId String

  messages      Message[]  @relation(name: "user")
  replymessages Message[]  @relation(name: "replyUser")
  reactions     Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Server {
  id         String @id @default(uuid())
  serverId   String @unique
  name       String @unique
  imageUrl   String
  inviteCode String @unique

  owner   Profile @relation(fields: [ownerId], references: [userId])
  ownerId String

  sUsers SUser[]
  rooms  Room[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Room {
  id        String   @id @default(uuid())
  roomId    String   @unique
  name      String
  type      RoomType @default(TEXT)
  isPrivate Boolean

  server   Server @relation(fields: [serverId], references: [serverId])
  serverId String

  createPermission  SUserRole[]
  updatePermission  SUserRole[]
  deletePermission  SUserRole[]
  messagePermission SUserRole[]
  privatePermission SUserRole[]
  messages          Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
}

model Reaction {
  id       String @id @default(uuid())
  reaction String
  count    Int

  suser           SUser         @relation(fields: [sUserId], references: [sUserId])
  sUserId         String
  user            Profile       @relation(fields: [userId], references: [userId])
  userId          String
  message         Message       @relation(fields: [messageId], references: [messageId])
  messageId       String
  directMessage   DirectMessage @relation(fields: [directMessageId], references: [directMessageId])
  directMessageId String

  @@index([sUserId])
  @@index([messageId])
  @@index([directMessageId])
  @@index([userId])
}

model Message {
  id        String  @id @default(uuid())
  messageId String  @unique
  content   String
  file      String?
  isDelete  Boolean @default(false)
  isReply   Boolean

  // The one who is replied to
  replyuser   SUser  @relation(fields: [replyuserId], references: [sUserId], name: "replyUser")
  replyuserId String
  // The who replied
  user        SUser  @relation(fields: [sUserId], references: [sUserId], name: "user")
  sUserId     String
  room        Room   @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  roomId      String

  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
  @@index([sUserId])
  @@index([replyuserId])
}

model Conversation {
  id String @id @default(uuid())

  profileOne   Profile @relation(fields: [profileOneId], references: [userId], name: "POneId")
  profileOneId String
  profileTwo   Profile @relation(fields: [profileTwoId], references: [userId], name: "PTwoId")
  profileTwoId String

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileOneId])
  @@index([profileTwoId])
}

model DirectMessage {
  id              String  @id @default(uuid())
  directMessageId String  @unique
  content         String
  file            String?
  isDelete        Boolean @default(false)

  user           Profile       @relation(fields: [userId], references: [userId])
  userId         String
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([userId])
}
